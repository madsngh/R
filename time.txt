# AirPassengers: Monthly airline passenger numbers from 1949-1960
# JohnsonJohnson: Quarterly earnings per Johnson & Johnson share
# nhtemp Average: yearly temperatures in New Haven, 
# Connecticut, from 1912-1971
# Nile: Flow of the river Nile


sales <- c(18, 33, 41, 7, 34, 35, 24, 25, 24, 21, 25, 20,
           22, 31, 40, 29, 25, 21, 22, 54, 31, 25, 26, 35)
tsales <- ts(sales, start=c(2003, 1), frequency=12)
tsales
class(tsales)

plot(tsales)
#plot(tsales,type="o", pch=19)
start(tsales)
end(tsales)
frequency(tsales)

# use the window() function
# to create a new time series that's a subset of the original
tsales.subset <- window(tsales, start=c(2003, 5), 
                        end=c(2004, 6))
tsales.subset

library(forecast)
View(Nile)

par(mfrow=c(2,2))
ylim <- c(min(Nile), max(Nile))
plot(Nile, main="Raw time series")
plot(ma(Nile, 3), main="Simple Moving Averages (k=3)", 
     ylim=ylim)
plot(ma(Nile, 7), main="Simple Moving Averages (k=7)",
     ylim=ylim)
plot(ma(Nile, 15), main="Simple Moving Averages (k=15)", 
     ylim=ylim)
dev.off()

fit <- forecast(ma(Nile,3))
accuracy(fit)
#Decompose

# The stl() function can only handle additive models, 
#Multiplicative models can be transformed into additive
#models using a log transformation.


plot(AirPassengers)
lAirPassengers <- log(AirPassengers)
plot(lAirPassengers, ylab="log(AirPassengers)")

# s.window controls how fast the seasonal effects can change 
# over time, and t.window controls how fast the trend can 
# change over time.
# s.window="periodic" forces seasonal effects to be identical across years.
fit <- stl(lAirPassengers, s.window="period")
plot(fit)

fit$time.series
fit1 <- exp(fit$time.series)
seasadj(fit1)


par(mfrow=c(1,2))
library(forecast)
monthplot(AirPassengers, xlab="", ylab="")
seasonplot(AirPassengers, year.labels="TRUE", main="")

## Exponential method
# The nhtemp time series contains the mean annual temperature in 
# degrees Fahrenheit in New Haven, Connecticut, from 1912 to 1971.

# The ses(), holt(), and hw() functions are convenience wrappers 
# to the ets() function with prespecified defaults.

library(forecast)
fit <- ets(nhtemp, model="ANN")

fit
forecast(fit, 1)
plot(forecast(fit, 1), xlab="Year",
     ylab=expression(paste("Temperature (", degree*F,")",)),
     main="New Haven Annual Mean Temperature")
accuracy(fit)


library(forecast)
fit <- ets(log(AirPassengers), model="AAA")
fit

accuracy(fit)

pred <- forecast(fit, 5)
pred

plot(pred, main="Forecast for Air Travel",
     ylab="Log(AirPassengers)", xlab="Time")

pred$mean <- exp(pred$mean)
pred$lower <- exp(pred$lower)
pred$upper <- exp(pred$upper)
p <- cbind(pred$mean, pred$lower, pred$upper)
dimnames(p)[[2]] <- c("mean", "Lo 80", "Lo 95", "Hi 80", "Hi 95")
p

# multiplicative
# The trend remains additive, but the seasonal and irregular 
# components are assumed to be multiplicative.
fit1 <- ets(AirPassengers, model="MAM") # or 
fit <- hw(AirPassengers, seasonal="multiplicative")
forecast(fit1, 2)
accuracy(fit)

library(forecast)
#Automatic exponential forecasting 
fit <- ets(JohnsonJohnson)
fit

forecast(fit,5)
plot(forecast(fit), main="Johnson & Johnson Forecasts",
     ylab="Quarterly Earnings (Dollars)", xlab="Time", flty=2)